type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID! 
  name: String!
  symbol: String!
  decimals: Int!
}


type Pool @entity(immutable: true) {
  id: ID!
  token0: Token! # address
  token1: Token! # address
  pair: Bytes! # address
  param3: BigInt! # uint256
  reserve0: BigInt!
  reserve1: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  
  liquidityProviders: [LiquidityProvider!]
}

type AddLiquidity @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveLiquidity @entity(immutable: true) {
  id: Bytes!
  sennder: Bytes! # address
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  amount0In: BigInt! # uint256
  amount1In: BigInt! # uint256
  amount0Out: BigInt! # uint256
  amount1Out: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Sync @entity(immutable: true) {
  id: Bytes!
  reserve0: BigInt! # uint256
  reserve1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type LiquidityProvider @entity {
  id: ID!  
  provider: Bytes!  
  pools: [Pool!]  
  token0Amount: BigDecimal!  
  token1Amount: BigDecimal!  
  liquidityAmount: BigDecimal!  
  timestamp: BigInt!  
}
